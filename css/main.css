*{
    margin:0;
    padding:0;
    box-sizing: border-box; /*El tama;o del elemento se mantiene constante*/
}

html{
scroll-behavior: smooth; /*Utilizado para las transiciones a las secciones*/
}

::selection {
color: #fff; /*Cambia el color del texto seleccionado en esta pseudoclase*/
background-color: blue;
}

/* Cambiar el ancho y el color de la barra de desplazamiento */

::-webkit-scrollbar{
    width: 10px; /* Ancho de la barra de desplazamiento */
}

::-webkit-scrollbar-track {
    background: var(--seconde-color); /* Color de fondo de la barra de desplazamiento */
}

::-webkit-scrollbar-thumb {
    background: var(--main-color); /* Color del 'pulgarcito' de la barra de desplazamiento */
    border-radius: 10px;
}

/*Se usa para establecer variables CSS globales o definir estilos que afectarán a todo el documento.*/

:root{
    --main-color: #ff7b00ea;
    --seconde-color: #ff7b00ea;
    --title-color: #222;
    --subtitle-color: #8d8d8d;
}



body{
    font-family: 'Poppins', sans-serif;
    min-height: 100vh; /*establece la altura mínima que un elemento debe tener.*/
    height: 1000px;
    overflow-x: hidden; /* Ocultar cualquier desbordamiento horizontal */
    position:relative;
}

a {
    text-decoration: none;
}

ul{ 
    list-style: none;
}


/* Esta clase se utiliza para hacer que las imágenes sean responsivas y se ajusten de manera 
adecuada al contenedor que las rodea.*/
.img-fluid {
    max-width: 100%;
    height: auto;
}

.section{
    padding: 90px 0 0;
}

.container {
    max-width: 1200px;
    margin: auto;
    padding: 0 50px;
}

.btn{
    background-color: var(--main-color);
    border: 2px solid var(--main-color);
    padding: 10px 15px;
    color: #fff;
    font-size: 16px;
    border-radius: 10px;
    transition: .4s;
}

.btn:hover{
    background-color: transparent;
    border: 2px solid var(--main-color);
    color: var(--main-color);

}


.btn i {
    font-size: 20px;
    margin-left: 10px;
}

.section_title {
    text-align: center;
    font-size: 36px;
    font-weight: 600;
    text-transform: capitalize;
    line-height: .8; /* Altura de línea del 80% del tamaño de la fuente */
    color: #222;
    position: relative;
    margin-bottom: 100px;
    padding-bottom: 20px;
}

/*La pseudo-clase ::before permite insertar contenido antes del contenido real de un 
elemento sin tener que modificar directamente el HTML*/

.section_title::before{
    content: '';
    position:absolute;
    bottom: 0;
    left: 50%;
    transform: translateX(-50%);
    width:100px;
    height: 2px;
    background-color: var(--main-color);
}

.section_title::after{
    content: '';
    position:absolute;
    bottom: -4px;
    left: 50%;
    transform: translateX(-50%);
    width:10px;
    height: 10px;
    border-radius: 50%;
    background-color: var(--main-color);
}

/*En resumen, esta regla define un contenedor que organiza sus elementos internos en una 
cuadrícula de dos columnas de igual ancho, con un espacio de separación entre las columnas.
 Esto es útil para diseñar y organizar los elementos de una página web en un diseño de 
 cuadrícula flexible y adaptable.*/

.grid {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    column-gap: 2rem;
}

/*Aqui empieza el Header*/
header{ 
    position: fixed;
    width: 100%;
    padding: 20px 0;
    z-index: 1000; /* Esto es útil cuando deseas controlar qué elementos deben
     estar por encima de otros en el diseño, especialmente en situaciones donde hay 
     superposición de elementos, como menús desplegables, ventanas emergentes o capas 
     de contenido.*/
}

header .active {
    background-color: #fff;
    box-shadow: 0 5px 10px rgba(0,0,0,15);
}

header .container {
    display: flex;
    align-items: center;
    justify-content: space-between;
}

.logo{
    width: 150px;
    height: auto;
    display: flex;
    align-items: center;
}

.menu{
    white-space: nowrap;
    transition: .5s;
    z-index: 999;
    position: relative;
}

.menu_item{
    display: inline-block;
}

.menu_link{
    padding: 5px 10px;
    position: relative;
    transition: .4s;
    color:#333;
    font-weight: 500;
}

.menu_link::before{
    content: '';
    position: absolute;
    top: 100%;
    left: 0;
    width: 100%;
    height: 2px;
    background-color: var(--main-color);
    transform: scale(0);
    transition: 4s;
}

.menu_link:hover{
    color: var(--main-color);
}

.active-link{
    color: var(--main-color);
}

.menu_link.active-link::before,
.menu_link:hover::before{
    transform: scale(1);
}

.close_icon{
    font-size: 25px;
    position: absolute;
    top: 30px;
    right: 250px;
    z-index: 1000;
    color: var(--main-color);
    cursor:pointer;
    display: none;
}

.toggle_icon{
    font-size: 32px;
    display: none;
    cursor: pointer;
    margin-right: 10px;
}

/*La regla @media screen and (max-width: 768px) es una regla de los Media Queries en CSS, 
utilizada para aplicar estilos específicos a diferentes tamaños de pantalla o dispositivos.*/
/*Cuando el ancho de la pantalla es igual o menor a 768 píxeles, los estilos dentro de este 
bloque @media se aplicarán*/

@media screen and (max-width: 768px) {
    .container{
        padding: 0 30px;
    }
    .menu{
        position: absolute;
        right: 0;
        top: 0;
        background-color: #eee;
        height: 100vh;
        padding-top: 100px;
        width: 300px;
        text-align: center;
        transform: translateX(110%);
        box-shadow: -10px 0 20px rgba(0,0,0,.15);
    }
    .menu.active{
        transform: translateX(0);
    }
    .menu_item{
        display: block;
        margin: 20px 0;
    }
    .menu_link{
        color: #333;
    }
    .toggle_icon{
        display: block;
    }
    .close_icon{
        display: block;
    }
}

/*Aqui se trabajara la seccion principal*/

.principal{
    padding-top: 114px;
    position: relative;
    display: block;
}

.principal_container{
    align-items: center;
}

.principal_container h4{
    font-size: 28px;
    font-weight: 600;
    color: var(--main-color);
    text-transform: uppercase;
}

.principal_container h1{
    font-size: 40px;
    font-weight: 600;
    font-family:'Times New Roman', Times, serif;
    white-space: nowrap;/*Evitas que el texto se divida en múltiples líneas automáticamente.
    El texto se mostrará en una sola línea y no se permitirá que se "envuelva" a la siguiente línea, independientemente del ancho del contenedor.
    Esto es útil cuando tienes contenido que debe mostrarse en una sola línea sin permitir saltos de línea, como en títulos largos, nombres, o cualquier texto que sea preferible que no se separe en múltiples líneas.*/
    margin-bottom: 10px;
    color: var(--title-color);
}

.principal_container p{
    margin: 10px 0 40px;
    color: #333;
    font-size: 18px;
}

.principal_container .btn{
    margin-top: 30px;
    display: inline-flex;/*La combinación de ambas crea un contenedor flexible que
     se comporta como un elemento en línea. Esto es útil cuando se desea aplicar las 
     propiedades de Flexbox a elementos que se distribuyen en línea, lo que permite 
     alinearlos y distribuirlos de manera flexible en el espacio disponible.*/
    align-items: center;
}

.principal_social{
    display: flex;
    column-gap: 20px;/*se utiliza para establecer el espacio entre las columna*/
}

.principal_social a{
    font-size: 22px;
    display: inline-flex;
    width: 50px;
    height: 50px;
    align-items: center;
    justify-content: center;
    background-color: #eee;
    color: #333;
    transition: .3s;
    border-radius: 50%;
    box-shadow: 0 0 10px rgba(0, 0, 0, .2);
}

.principal_social a:hover{
    color: var(--main-color);
    box-shadow: 0 0 10px var(--main-color);
}

.principal_img{
    text-align: left;
}

@media screen and (max-width: 768px){
    .principal_content h4{
            font-size: 16px;
    }
    .principal_content h1{
        font-size: 32px;
    }

    .principal_content p{
        font-size: 15px;
}
}

@media screen and (max-width: 576px){
    .principal_container{
        grid-template-columns: 1fr;/*se utiliza en CSS Grid Layout para definir el 
        tamaño y la distribución de las columnas en un contenedor de rejilla.*//*Cuando
         se define con 1fr, la columna se expandirá para llenar todo el espacio 
         disponible horizontalmente en el contenedor de la rejilla.*/
        row-gap: 2rem;/*Establece espacio entre lineas de 2 rem*/
        justify-content: center;
    }

    .principal_content{
        order: 2;/*La propiedad CSS order se utiliza en Flexbox y CSS Grid para 
        controlar el orden de los elementos secundarios dentro de un contenedor 
        flexible o una cuadrícula. Por defecto, los elementos se muestran en el orden 
        en que aparecen en el HTML, pero order permite cambiar este orden visualmente
         sin modificar la estructura del DOM.*/
        text-align: center;
    }

    .principal_social{
        justify-content: center;
    }
    .principal_img{
        text-align: center;
    }
}












